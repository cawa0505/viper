#! /bin/bash

# this script is more towards when the network settings is bridge,
# however I think it works in other settings as well.

# default user and password to the vm
vmuser="mhewedy"

# --- start of util functions

# $1 is the vm name
getvmip() {
  vmname=$1
  vmip "$vmname" # see vmip subdirectory
  while [ $? -ne 0 ]; do
    sleep 5
    vmip "$vmname"
  done
}

# make sure connection to vm is established and valid ip is retruned
establish_ssh() {
  vmname=$1
  # try first the nice way that waits until ip is assigned
  ip=$(getvmip "$vmname")
  ssh "$vmuser@$ip" -- ls &>/dev/null
  while [ $? -ne 0 ]; do
    # try the hard way if the assigned ip is invalid
    ip=$(vmip "$vmname" --purge)
    ssh "$vmuser@$ip" -- ls &>/dev/null
  done
}

# -- start of case functions
create_fn() {
  next=$(($(vboxmanage list vms | sort | tail -n 1 | cut -d " " -f1 | cut -d "\"" -f2 | cut -d "_" -f2) + 1))
  vmname="vm_$(printf %02d $next)"
  vmbasedir="$HOME/.vms"
  mkdir -p "$vmbasedir"
  vboxmanage import "$2" --vsys 0 --vmname "$vmname" --basefolder "$vmbasedir" --cpus 1 --memory 1024 &>"$vmbasedir/log.out"

  if [ "$#" -gt 2 ]; then
    script=$3
    rscript=$(basename "$script")

    echo "Provisioning $vmname..."

    vboxmanage startvm "$vmname" --type headless >"$vmbasedir/log.out"

    establish_ssh "$vmname"
    ip=$(getvmip "$vmname")
    scp "$script" "$vmuser@$ip:/tmp/$rscript" >"$vmbasedir/log.out"
    ssh "$vmuser@$ip" -- chmod +x "/tmp/$rscript"
    ssh "$vmuser@$ip" -- "/tmp/$rscript"
  fi
}

rm_fn() {
  # accept multiple vms names
  for vmname in "${@:2}"; do
    echo "deleting $vmname ..."
    vboxmanage controlvm "$vmname" poweroff
    VBoxManage unregistervm "$vmname" --delete
  done
}

start_fn() {
  # accept multiple vms names
  for vmname in "${@:2}"; do
    echo "starting $vmname ..."
    vboxmanage startvm "$vmname" --type headless
  done
}

stop_fn() {
  # accept multiple vms names
  for vmname in "${@:2}"; do
    echo "stoping $vmname ..."
    vboxmanage controlvm "$vmname" poweroff
  done
}

# ---- start of case statement
case $1 in
ls) # vm ls
  vboxmanage list vms | cut -d " " -f1 | cut -d "\"" -f2
  ;;
ps) # vm ps
  vboxmanage list runningvms | cut -d " " -f1 | cut -d "\"" -f2
  ;;
create)
  if [ $# -lt 2 ]; then
    printf "Usage: vm create <path/to/image.ova|image.ovf> [/path/to/provision_script.sh]

Examples:
$ vm create ~/work/vm/ubuntu.ova

"
    exit 2
  fi
  create_fn "$@"
  ;;
rm)
  if [ $# -eq 1 ]; then
    printf "Usage: vm rm <vmname1> [,vmname2, ...]

Examples:
$ vm rm vm_01

"
    exit 2
  fi

  rm_fn "$@"
  ;;
start)
  if [ $# -eq 1 ]; then
    printf "Usage: vm start <vmname1> [,vmname2, ...]

Examples:
$ vm start vm_01

"
    exit 2
  fi

  start_fn "$@"
  ;;
stop)
  if [ $# -eq 1 ]; then
    printf "Usage: vm stop <vmname1> [,vmname2, ...]

Examples:
$ vm stop vm_01

"
    exit 2
  fi

  stop_fn "$@"
  ;;
ssh)
  if [ $# -lt 2 ]; then
    printf "Usage: vm ssh <vmname> [options]

Examples:
$ vm ssh vm_01

$ vm ssh vm_01 -- cat /etc/passwd

"
    exit 2
  fi

  establish_ssh "$2"

  ip=$(getvmip "$2")
  ssh "$vmuser@$ip" "${@:3}"
  ;;
*)
  printf "Usage: vm <command> [options]
Create, control and connect to VirtualBox VM instances.

Available commands:
  ls        List all created VMs
  ps        List all running VMs
  create    Create a VM from OVA file
  start     Start one or more VMs
  ssh       ssh into a running VM
  stop      Stop one or more VMs
  rm        Remove one or more VMs
"
  exit 2
  ;;
esac
